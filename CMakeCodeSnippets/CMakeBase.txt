cmake_minimum_required(VERSION 3.20)

# vcpkg configuration 需要根据平台进行配置
# "vcpkg help triplet" command: Available architecture triplets
set(CMAKE_TOOLCHAIN_FILE "D:/Development/vcpkg/scripts/buildsystems/vcpkg.cmake")
set(VCPKG_HOST_TRIPLET "x64-windows")
set(VCPKG_TARGET_TRIPLET "x64-windows")
# https://learn.microsoft.com/en-us/vcpkg/reference/vcpkg-json
# the configuration JSON file 'vcpkg.json'

# MinGW+Clang | Ninja | CMake | VSCode + clangd + c/c++ Snippets
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
set(CMAKE_C_COMPILER clang) # clang | gcc | MSVC(cl)
set(CMAKE_CXX_COMPILER clang++) # clang++ | g++ | | MSVC(cl)

set(CMAKE_C_STANDARD 17)
set(CMAKE_C_STANDARD_REQUIRED ON)
# 只启用 ISO C 标准的编译器标志, 而不使用特定编译器的扩展
set(CMAKE_C_EXTENSIONS OFF)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
# 只启用 ISO C++ 标准的编译器标志, 而不使用特定编译器的扩展
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_BUILD_TYPE "Debug") # "Release" | "Debug"
if(CMAKE_BUILD_TYPE)
    message(STATUS "The build type is ${CMAKE_BUILD_TYPE}")
endif()

# ---------------------------------
project(CMake_Tutorial
    VERSION 0.1.1
    DESCRIPTION "the CMake tutorial"
    LANGUAGES CXX C CUDA
)

# 设置输出二进制路径
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)
set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)

# 设置输出二进制路径
set(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR}/bin)
set(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR}/lib)

# head file include folders
include_directories("")
# link static library or dynamic library static loader folder
link_directories("")

# installing by vcpkg
find_package(glfw3 CONFIG REQUIRED)
find_package(glm CONFIG REQUIRED)

add_executable(main)
target_sources(main
    PRIVATE
        "main.cpp"
)
target_link_libraries(main
    PRIVATE
        "vulkan-1.lib"
        "glfw"
        "glm::glm"
)

add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/quick_start/)
